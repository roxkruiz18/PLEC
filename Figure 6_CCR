library(Seurat)
library(dplyr)
library(magrittr)
library(data.table)
library(Matrix)
library(devtools)
library(RcppArmadillo)
library(Rcpp)
library(scales)
library(pheatmap)
library(gplots)
library(ggplot2)
library(cowplot)
library(foreach)
library(doParallel)
library(stringr)
library(harmony)

##If you need to download packages
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("harmony")


#setwd
setwd("C:////Steele_scRNAseq_Proj")

##open scAtlas
Atlas <- readRDS("C:////scAtlas.rds/scAtlas.rds")

VlnPlot(Atlas, features = "PLEC") 
##obtain Ductal only cells 

Ductal <- subset(Atlas, idents = "DUCTAL")
Ductal_primary <- subset(Ductal, subset = DiseaseState == "Primary tumor")
saveRDS(Ductal_primary, "C:////Steele_scRNAseq/Ductal_primary.rds" )

#check that the number of cells in DUCTAL is the same as the original seurat object
table(Atlas$Clusters)

#obtain PLEC counts

plec_counts <- FetchData(Ductal_primary, vars = "PLEC")

#make histogram
library(ggplot2)


# Plot histogram
ggplot(plec_counts, aes(x = PLEC)) +
  geom_histogram(binwidth = 0.1, fill = "blue", color = "black", alpha = 0.7) +
  theme_minimal() +
  labs(title = "Distribution of PLEC Expression", x = "PLEC Counts", y = "Cell Frequency")

## look at how many cells have a PLEC count of zero or > zero
table(plec_counts$PLEC > 0)
#FALSE   TRUE 
#123125  87615
plec_counts <- as.data.frame(plec_counts)

##get PLEC positive cells
plec_positive_cells <- plec_counts %>% filter(PLEC > 0)

range(plec_positive_cells$PLEC)
#[1] 0.1697718 5.5840658

mean(plec_positive_cells$PLEC)
#[1] 1.869544

##split PLEC positive cells into quartiles
quartiles <- quantile(plec_positive_cells$PLEC, probs = c(0, 0.25, 0.5, 0.75, 1))
q0 <- quartiles[1]  # Minimum
q1 <- quartiles[2]  # 25th percentile (Q1)
q2 <- quartiles[3]  # Median (Q2)
q3 <- quartiles[4]  # 75th percentile (Q3)
q4 <- quartiles[5]  # Maximum

##add quartile column to plec_positive cells
plec_positive_cells$quartile <- cut(
  plec_positive_cells$PLEC,
  breaks = c(q0, q1, q2, q3, q4), 
  labels = c("Q1", "Q2", "Q3", "Q4"), 
  include.lowest = TRUE
)


##see the number of cells per quartile
table(plec_positive_cells$quartile)
#Q1    Q2    Q3    Q4 
#21907 21913 21893 21902 


#visualize quartiles via violin plot
library(ggplot2)

ggplot(plec_positive_cells, aes(x = quartile, y = PLEC, fill = quartile)) +
  geom_violin() +
  theme_minimal() +
  labs(title = "PLEC Expression by Quartile", x = "Quartile", y = "PLEC Count")

##or boxplot
bp <- ggplot(plec_positive_cells, aes(x = quartile, y = PLEC, fill = quartile)) +
  geom_boxplot() +
  theme_classic() +
  labs(title = "PLEC Expression by Quartile", x = "Quartile", y = "PLEC Count")+
  theme(plot.title = element_text(hjust = 0.5)) + theme (plot.title = element_text(face = "bold", size = 10)) + 
  theme(axis.title.x = element_text(size = 9, face = 2), axis.title.y = element_text(size = 9, face = 2)) + 
  theme(axis.line = element_line(size = 0.5)) + 
  theme(axis.text.x = element_text(size=9, face = 1, color = "gray10"),axis.text.y = element_text(size = 9, face = 1, color = "gray10")) +
  scale_fill_manual(values=c("steelblue1", "maroon2", "seagreen3", "orange")) + 
  theme(legend.position="none")+ stat_boxplot(geom = 'errorbar', width = 0.3)

bp
###save image
Figure6A <- bp
ggsave("Figure6A.png", plot = Figure6A, width = 5.5, height = 4.5, units = "cm", device = "png", dpi = 1200, scale = 2)
dev.off()


###make a PLEC positive Ductal cells seurat object
Ductal_positive <- subset(Ductal_primary, subset = PLEC > 0)

#check the new seurat object
VlnPlot(Ductal_positive, features = "PLEC") 
#looks good

##now add quartile data to the new Ductal_positive seurat object
#check cells barcodes match
head(rownames(Ductal_positive@meta.data))  # Check Seurat cell names
head(rownames(plec_positive_cells))  # Check quartile dataframe cell names

##remove PLEC column
plec_positive_cells2 <- plec_positive_cells
plec_positive_cells2$PLEC <- NULL

##store quartile information in the meta.data
# Ensure the dataframe has rownames as cell names and a column named "quartile"
plec_positive_cells2 <- plec_positive_cells2[colnames(Ductal_positive), , drop = FALSE]  # Match cell order

# Add quartile information to Seurat object
Ductal_positive <- AddMetaData(Ductal_positive, metadata = plec_positive_cells2)

##check the meta.data
table(Ductal_positive$quartile)  # See the number of cells per quartile
#Q1    Q2    Q3    Q4 
#21907 21913 21893 21902 
#looks good!


####now I need to subset out the T cells and Myeloid/macrophage cells as a separate seruat object
####then, I will merge this seurat object with Ductal_positive
####with this, I will be able to run cellchatDB to infer cell-cell communication

###check the original seurat object for the cluster names
Atlas$Clusters

##Need to subset MYELOID cluster into Macrophage, Monocyte, Dendritic, and Neutrophil

Mye <- subset(Atlas, idents = "MYELOID")

##import Myeloid subcluster csv file
Mye_cluster = read.csv("C:////////Myeloid_AtlastLabels.csv", header = TRUE, row.names = 1)

###add the subset names to the Mye suerat object as meta.data
##first, get a dataframe with the rownames and subset names
##then add to meta.data

Mye_subclusters <- Mye_cluster[, "Coarse", drop = FALSE]
Mye2 <- AddMetaData(Mye, metadata = Mye_subclusters)

#Now make sure all of the Myeloid cells come from Primary Tumor samples
Mye2 <- subset(Mye2, subset = DiseaseState == "Primary tumor")


###Now subset the TNK cells from the original seurat object
TNK <- subset(Atlas, idents = "TNK")
#Now make sure all of the TNK cells come from Primary Tumor samples
TNK_primary <- subset(TNK, subset = DiseaseState == "Primary tumor")
cell_ids <- colnames(TNK_primary)
original_clusters <- Idents(TNK_primary)

# Create a dataframe
TNK_df <- data.frame(Cell_ID = cell_ids, Seurat_Cluster = original_clusters)

###before combingin the three seurat objects, we need to check and make sure that they have the same number of rowwnames
length(rownames(Ductal_positive))
length(rownames(Mye2))



#now, merge the objects
merged_seurat <- merge(Ductal_positive, y = list(Mye2, TNK_primary))


####we need to change the seruat_clusters to match the information in our meta.data
#first, well get all of the cellIDs and original cluster names
#then, we will create a column that adds the subsetted information regarding the quartile and myeloid subset information
#then, we will assign new suerat cluster identities based on that subsetted information
cell_ids <- colnames(merged_seurat)
# Extract original Seurat clusters
original_clusters <- Idents(merged_seurat)

# Create a dataframe
cluster_df <- data.frame(Cell_ID = cell_ids, Seurat_Cluster = original_clusters)

# View the dataframe
head(cluster_df)

###make a single dataframe with the Myeloid, Ductal, and TNK cell subsetted identities
###we will be merging plec_positive_cells2, Mye_subclusters, and TNK

##first, make a new column that contains the cell id information
plec_positive_cells2$Cell_ID <- rownames(plec_positive_cells2)
Mye_subclusters$Cell_ID <- rownames(Mye_subclusters)

##give the quartile and coarse columns the same name 
plec_positive_cells2 <- plec_positive_cells2 %>% rename(Seurat_Cluster = Subcluster)
Mye_subclusters <- Mye_subclusters %>% rename(Seurat_Cluster = Subcluster)
TNK_df <- TNK_df%>% rename(Seurat_Cluster = Subcluster)

#now merge the dataframes based on Cell_ID

df_merged <- plec_positive_cells2 %>%
  full_join(Mye_subclusters, by = "Cell_ID") %>%
  full_join(TNK_df, by = "Cell_ID")

##Add back rownames
df_merged <- df_merged %>% tibble::column_to_rownames(var = "Cell_ID")
df_merged$Cell_ID <- rownames(df_merged)

###collapse Subcluster columns
df_merged <- df_merged %>% mutate(Seurat_Cluster = coalesce(Seurat_Cluster.x, Seurat_Cluster.y, Seurat_Cluster)) 
df_merged <- df_merged %>% select(Cell_ID, Seurat_Cluster)  # Keep only the merged columns
df_merged <- df_merged %>% rename(Seurat_Cluster = Seurat_Cluster)

# Create a unique numeric mapping based on Subcluster names
df_merged2 <- df_merged %>%
  mutate(Subcluster_Num = match(Seurat_Cluster, unique(Seurat_Cluster)))
df_merged2 <- df_merged2 %>% rename(Clusters = Seurat_Cluster)
df_merged2 <- df_merged2 %>% rename(seurat_clusters = Subcluster_Num)
##save this file
write.csv(df_merged2, "C:///////df_merged2_new_seurat_clusters.csv")
df_merged2 <- read.csv("C://///df_merged2_new_seurat_clusters.csv")
#df_merged2 <- df_merged2 %>% rename(Clusters = Subcluster)

###use the next three lines when opening the dr_merged2 csv
#df_merged2$X <- NULL
#df_merged2 <- df_merged2 %>% tibble::column_to_rownames(var = "Cell_ID")
#df_merged2$Cell_ID <- rownames(df_merged2)


# Now add this information into the meta data

# First Check if Cell_ID matches Seurat object cell names
all(df_merged2$Cell_ID %in% Cells(merged_seurat))
#False

###this is likely due to an issue of order
###make sure the cell IDs in the seurat object and the df_merged2 are the same
# Get cell names from the Seurat object
seurat_cells <- Cells(merged_seurat)

# Check if all Cell_IDs in df exist in the Seurat object
all(df_merged2$Cell_ID %in% seurat_cells)  
#FALSE


df_merged2 <- df_merged2[match(seurat_cells, df_merged2$Cell_ID), ]
# Check if Cell_ID matches Seurat object cell names
all(df_merged2$Cell_ID %in% Cells(merged_seurat))
#TRUE

df_merged2$Cell_ID <- NULL  # Remove the column


# Add the metadata to Seurat object
merged_seurat <- AddMetaData(merged_seurat, metadata = df_merged2)

all(rownames(merged_seurat@meta.data) == Cells(merged_seurat))

Idents(object = merged_seurat) <- merged_seurat@meta.data$Clusters

saveRDS(Ductal, file = "C:/Users/roxkr/OneDrive/Desktop/Steele scRNAseq/Steele_scRNAseq/Steele_merged_seurat.rds")

merged_seurat <- readRDS("C:/Users/roxkr/OneDrive/Desktop/Steele scRNAseq/Steele_scRNAseq/Steele_merged_seurat.rds")

###the merged_seurat is too big to run for cell chat. I need to get rid of all cell identities that I don't want to infer
###ligand-receptor pairs for

merged_seurat2<- subset(merged_seurat, idents = c("Q1", "Q2", "Q3", "Q4", "Macrophage", "TNK"))
saveRDS(merged_seurat2, file = "C://////Steele_merged_seurat2.rds")

table(Idents(merged_seurat2))


Ductal_quartiles <- subset(merged_seurat, idents = c("Q1", "Q2", "Q3", "Q4"))


#normalize the data as normal
#```{r}
merged_seurat2 <- NormalizeData(object = merged_seurat2, normalization.method = "LogNormalize", scale.factor = 10000)

#Percent Mitochondrial Genes
#QC Metric used to remove cells with overabundant Mitochondrial genes, typically associated with nuclear wash out during sequencing
merged_seurat2[["percent.mt"]] <- PercentageFeatureSet(merged_seurat2, pattern = "^MT-")

#Plot the nFeatures/counts/% Mito to get general idea about the quality of your data
pdf('QC_VlnPlot.pdf', height = 20, width = 20)
VlnPlot(merged_seurat2, features = c("nFeature_RNA", "nCounts_RNA", "percent.mt"), ncol = 3, pt.size = .0)
dev.off()

#FIND VARIABLE GENES
merged_seurat2 <- FindVariableFeatures(object = merged_seurat2, selection.method = "vst", mean.function = ExpMean, dispersion.function = LogVMR, nfeatures = 5000)


#THIS STEP MAY TAKE A VERY LONG TIME
#Scale Data
merged_seurat2 <- ScaleData(object = merged_seurat2, vars.to.regress = c("nCount_RNA", "nFeature_RNA", "percent.mt"), features = VariableFeatures(merged_seurat2))


# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(merged_seurat2), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(merged_seurat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
dev.off()



#Data Visualization
#Run PCA and Determine Dimensions for 90% Variance
merged_seurat2 <- RunPCA(object = merged_seurat2, features = VariableFeatures(object = merged_seurat2))


VizDimLoadings(merged_seurat2, dims = 1:2, reduction = "pca")
#```
#```{r}
ElbowPlot(merged_seurat2)
#```
#```{r}
DimHeatmap(merged_seurat2, dims = 1:2, cells = 500, balanced = TRUE)
#```
#```{r}
#```{r}

# clustering
merged_seurat2 <- FindNeighbors(merged_seurat2, dims = 1:15)
merged_seurat2 <- FindClusters(merged_seurat2, resolution = 0.5)

# running non-linear dimensional reduction
merged_seurat2 <- RunUMAP(merged_seurat2, dims = 1:15)
#```
#```{r}
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(merged_seurat2, reduction = "umap", group.by = "Clusters")
#Error in `[.data.frame`(data, , group) : undefined columns selected
#In addition: Warning message:
#The following requested variables were not found: cluster_name 



#```
#```{r}
#Looks good so we can save the file
saveRDS(merged_seurat2, file = "C:////Steele_merged_seurat2_after_normalization.rds")



####-------------------------------GSEA Analysis-----------------------------------#### 

library(clusterProfiler)
library(org.Hs.eg.db)
library(msigdbr)

# Set the identity class to the variable of interest
Ductal_quartile <- subset(merged_seurat2, idents = c("Q1", "Q2", "Q3", "Q4"))


# Perform differential gene expression analysis
deg_results_Q1vQ4 <- FindMarkers(Ductal_quartile, ident.1 = "Q4", ident.2 = "Q1", 
                           logfc.threshold = 0, min.pct = 0.1, test.use = "wilcox")

deg_results_Q1vQ3 <- FindMarkers(Ductal_quartile, ident.1 = "Q3", ident.2 = "Q1", 
                                 logfc.threshold = 0, min.pct = 0.1, test.use = "wilcox")

deg_results_Q1vQ2 <- FindMarkers(Ductal_quartile, ident.1 = "Q2", ident.2 = "Q1", 
                                 logfc.threshold = 0, min.pct = 0.1, test.use = "wilcox")

# Add gene names as a column
deg_results_Q1vQ4$gene <- rownames(deg_results_Q1vQ4)
deg_results_Q1vQ3$gene <- rownames(deg_results_Q1vQ3)
deg_results_Q1vQ2$gene <- rownames(deg_results_Q1vQ2)



# Add ENTREZID as a new column
# Convert gene symbols to Entrez IDs
converted_genes_Q1vQ4 <- bitr(deg_results_Q1vQ4$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
converted_genes_Q1vQ3 <- bitr(deg_results_Q1vQ3$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
converted_genes_Q1vQ2 <- bitr(deg_results_Q1vQ2$gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)


#Filter out genes that start with MT
deg_results_Q1vQ4_filtered <- deg_results_Q1vQ4 %>%
  filter(!grepl("^MT-", gene) & !grepl('^RPS',gene) & !grepl('^RPL',gene)) 

deg_results_Q1vQ3_filtered <- deg_results_Q1vQ3 %>%
  filter(!grepl("^MT-", gene) & !grepl('^RPS', gene)& !grepl('^RPL',gene)) 

deg_results_Q1vQ2_filtered <- deg_results_Q1vQ2 %>%
  filter(!grepl("^MT-", gene) & !grepl('^RPS', gene)& !grepl('^RPL', gene)) 



# Merge with original dataframe to add Entrez IDs
deg_results_Q1vQ4_filtered <- merge(deg_results_Q1vQ4_filtered, converted_genes_Q1vQ4, by.x = "gene", by.y = "SYMBOL", all.x = TRUE)
deg_results_Q1vQ3_filtered <- merge(deg_results_Q1vQ3_filtered, converted_genes_Q1vQ4, by.x = "gene", by.y = "SYMBOL", all.x = TRUE)
deg_results_Q1vQ2_filtered <- merge(deg_results_Q1vQ2_filtered, converted_genes_Q1vQ4, by.x = "gene", by.y = "SYMBOL", all.x = TRUE)

deg_results_Q1vQ4_filtered <- na.omit(deg_results_Q1vQ4_filtered)  # Remove rows without Entrez IDs
deg_results_Q1vQ3_filtered <- na.omit(deg_results_Q1vQ3_filtered)  # Remove rows without Entrez IDs
deg_results_Q1vQ2_filtered <- na.omit(deg_results_Q1vQ2_filtered)  # Remove rows without Entrez IDs


# create a ranked gene list that is filtered with p < 0.05

resSig.Q4.1 <- as.data.frame(deg_results_Q1vQ4_filtered) %>% 
  dplyr::select(gene, avg_log2FC, ENTREZID, p_val_adj) %>% 
  filter(p_val_adj < 0.01) %>%
  arrange(desc(avg_log2FC))
head(resSig.Q4.1)


resSig.Q3.1 <- as.data.frame(deg_results_Q1vQ3_filtered) %>% 
  dplyr::select(gene, avg_log2FC, ENTREZID, p_val_adj) %>% 
  filter(p_val_adj < 0.01) %>%
  arrange(desc(avg_log2FC))
head(resSig.Q3.1)


resSig.Q2.1 <- as.data.frame(deg_results_Q1vQ2_filtered) %>% 
  dplyr::select(gene, avg_log2FC, ENTREZID, p_val_adj) %>% 
  filter(p_val_adj < 0.01) %>%
  arrange(desc(avg_log2FC))
head(resSig.Q2.1)



Q4v.Q1 <- resSig.Q4.1 %>% dplyr::select(ENTREZID, avg_log2FC)
Q4v.Q1$gcSample <- c('Q4.vs.Q1')
Q3v.Q1 <- resSig.Q3.1 %>% dplyr::select(ENTREZID, avg_log2FC)
Q3v.Q1$gcSample <- c('Q3.vs.Q1')
Q2v.Q1 <- resSig.Q2.1 %>% dplyr::select(ENTREZID, avg_log2FC)
Q2v.Q1$gcSample <- c('Q2.vs.Q1')


## combine each dataframe
Q.Sample.List <- rbind(Q2v.Q1, Q3v.Q1, Q4v.Q1)

clusterdf <- Q.Sample.List



library(clusterProfiler)
#clusterdf <- data.frame(ENTREZID=names(clusterdf$ENTREZID), log2FoldChange=(clusterdf$avg_log2FC))
clusterdf <- clusterdf[abs(clusterdf$avg_log2FC) > 1,]
clusterdf$group <- "upregulated"
clusterdf$group[clusterdf$avg_log2FC < 0] <- "downregulated"

#Reactome
formula_res <- compareCluster(ENTREZID~group+gcSample, data=clusterdf, fun="enrichPathway")
dotplot(formula_res)
dotplot(formula_res, x="group", showCategory = 10, font.size = 6) + facet_grid(~gcSample)

filtered_formula_res <- formula_res@compareClusterResult[
  formula_res@compareClusterResult$Description %in% c("Type I hemidesmosome assembly", "Cell-Cell communication", "Cell junction organization",
                                                  "Heme signaling", "Glucose metabolism", "Immunological synapse",
                                                  "Phosphorylation of CD3 and TCR zeta chains", "Aerobic respiration and respiratory electron transport",
                                                  "Cellular response to chemical stress", "Antimicrobial peptides", "C-type lectin receptors (CLRs)",
                                                  "MHC class II antigen presentation", "Formation of ATP by chemiosmotic coupling", 
                                                   "Interferon gamma signaling", "Antigen cross presentation", "Integrin signaling", "Diseases of signal transduction by growth factor receptors and second messengers"), 
]

filtered_formula_res

# Create a new compareClusterResult object
subset_result <- formula_res
subset_result@compareClusterResult <- filtered_formula_res

# Ensure the new object retains the right structure
subset_result@compareClusterResult <- droplevels(subset_result@compareClusterResult)



subset_reac <- dotplot(subset_result, x = "group", showCategory = 35) + facet_grid(~gcSample) + 
  theme(axis.text.x=element_text(size=12, color = "black")) + 
  theme(axis.title.x=element_blank()) +
  theme(axis.text.y=element_text(size=12, color = "black")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_discrete(labels = scales::label_wrap(40)) +
  theme(panel.border = element_rect(color = "black", size = 1, fill = NA)) + # adjust size for border thickness
  scale_fill_gradientn(colors = c("navy", "dodgerblue", "azure1"),     # Customize color range
                       name = "p.adjust",                       # Legend title
                       limits = c(0, 0.05),             # Adjust to fit your p-value range
                       breaks = c(0.04, 0.03, 0.02, 0.01),            # Ensure breaks and labels match
                       labels = c("0.04", "0.03", "0.02", "0.01")) +
  guides(fill = guide_colorbar(reverse = TRUE)) +  # Reverse legend order + 
  theme(legend.position = "right")
subset_reac

Figure6a <- subset_reac
ggsave("Figure6a.png", plot = Figure6a, width = 8.577326, height = 8.719568, units = "cm", 
       device = "png", dpi = 1200, scale = 2)
dev.off()








######---------------------------------------Cell Chat analysis-------------------------------------######

#if you need to download CellChat...
#if (!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")

#BiocManager::install("ComplexHeatmap")

# download CellChat
#devtools::install_github("jinworks/CellChat")
library("CellChat")



#Extract the data for cellchat analysis
#```{r}




# For Seurat version >= “5.0.0”, get the normalized data via `seurat_object[["RNA"]]$data`
data.input = merged_seurat2[["RNA"]]$data

# create labels
labels <- Idents(merged_seurat2)

# create dataframe of the cell labels
meta <- data.frame(labels = labels, row.names = names(labels)) 

#```

cellchat <- createCellChat(object = data.input, meta = meta, group.by = "labels")

#> [1] "Create a CellChat object from a data matrix"
#> Set cell identities for the new CellChat object 
#> The cell groups used for CellChat analysis are  APOE+ FIB, FBN1+ FIB, COL11A1+ FIB, Inflam. FIB, cDC1, cDC2, LC, Inflam. DC, TC, Inflam. TC, CD40LG+ TC, NKT
#```
#```{r}
CellChatDB <- CellChatDB.human # use CellChatDB.mouse if running on mouse data
#showDatabaseCategory(CellChatDB)
#```
#```{r}
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)

# use a subset of CellChatDB for cell-cell communication analysis
#CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling", key = "annotation") # use Secreted Signaling

# Only uses the Secreted Signaling from CellChatDB v1
#  CellChatDB.use <- subsetDB(CellChatDB, search = list(c("Secreted Signaling"), c("CellChatDB v1")), key = c("annotation", "version"))

# use all CellChatDB except for "Non-protein Signaling" for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB, search = c("Secreted Signaling", "ECM-Receptor", "Cell-Cell Contact"), key = "annotation")


#use all CellChatDB for cell-cell communication analysis
#CellChatDB.use <- CellChatDB # simply use the default CellChatDB. We do not suggest to use it in this way because CellChatDB v2 includes "Non-protein Signaling" (i.e., metabolic and synaptic signaling). 

# set the used database in the object
cellchat@DB <- CellChatDB.use
#```
#```{r}
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cellchat <- identifyOverExpressedGenes(cellchat)

# Increase the max size for globals
options(future.globals.maxSize = 10 * 1024^3)  # Set to 10 GB (adjust as needed)

cellchat <- identifyOverExpressedInteractions(cellchat)
#> The number of highly variable ligand-receptor pairs used for signaling inference is 1248

#> [1] 13.20763
# project gene expression data onto PPI (Optional: when running it, USER should set `raw.use = FALSE` in the function `computeCommunProb()` in order to use the projected data)
# cellchat <- projectData(cellchat, PPI.human)
#```
#```{r}
ptm = Sys.time()
future::plan("multisession", workers = 4)
options(future.globals.maxSize = 60 * 1024^3)
cellchat <- computeCommunProb(cellchat, type = "triMean")
#```
object.size(cellchat)



#```{r}
cellchat <- filterCommunication(cellchat, min.cells = 10)
#The cell-cell communication related with the following cell groups are excluded due to the few number of cells:  RBCs ! 	6.8% interactions are removed!

cellchat <- computeCommunProbPathway(cellchat)

cellchat <- aggregateNet(cellchat)
#```

#```{r}
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T,  label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
#```
#```{r}

## plec-High and plec-Low as Senders
Figure.6C <- netVisual_bubble(cellchat, sources.use = c(2,1,3,4), targets.use = c(9))  + theme(
  axis.text.x = element_text(size = 12, face = "bold", colour = c(rep("steelblue1", 1), rep("maroon2", 1), rep("seagreen3", 1), rep("orange", 1))), axis.text.y = element_text(size = 10, color = "black")
)
Figure.6C
#save plot
ggsave("Figure6C.png", plot = Figure.6C, device = "png", width = 6.577326, height = 10.719568, units = "cm", dpi = 1200, scale = 1.7)
dev.off()


Figure.6D <- netVisual_bubble(cellchat, sources.use = c(9), targets.use = c(1,2,3,4))  + theme(
  axis.text.x = element_text(size = 12, face = "bold", colour = c(rep("steelblue1", 1), rep("maroon2", 1), rep("seagreen3", 1), rep("orange", 1))), axis.text.y = element_text(size = 10, color = "black")
)
Figure.6D 
#save plot
ggsave("Figure6D.png", plot = Figure.6D, device = "png", width = 5.177326, height = 4.719568, units = "cm", dpi = 1200, scale = 2)
dev.off()





####---------------------------------Make violin plots of MHC molecules--------------------------####

features_MHC <- c("HLA-A", "HLA-B", "HLA-C", "HLA-E ")
# Generate individual violin plots with adjusted axis title sizes
plots <- lapply(features_MHC, function(features_MHC) {
  VlnPlot(Ductal_quartiles, features = features_MHC,
          cols = c('steelblue1', 'maroon2', 'seagreen3', 'orange'), fill.by = "ident", alpha = 0.025) +
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_text(size = 10),
      axis.text.x = element_text(size=10),
      axis.text.y = element_text(size=9),
      title = element_text(size=12, face = "bold"),
      legend.position = "none"
    )
})
plots[[1]]
combined_plots_MHC <- CombinePlots(plots = plots)
ggsave("combined_plots_MHC_2.png", plot = combined_plots_MHC, width = 9.077326, height = 8.719568, units = "cm", 
       device = "png", dpi = 1200, scale = 1.5)
dev.off()
combined_plots_MHC

